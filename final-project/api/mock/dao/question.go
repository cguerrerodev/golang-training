// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cguerrero-bdev/golang-training/final-project/api/components/dao (interfaces: QuestionDao)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "github.com/cguerrero-bdev/golang-training/final-project/api/components/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQuestionDao is a mock of QuestionDao interface
type MockQuestionDao struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionDaoMockRecorder
}

// MockQuestionDaoMockRecorder is the mock recorder for MockQuestionDao
type MockQuestionDaoMockRecorder struct {
	mock *MockQuestionDao
}

// NewMockQuestionDao creates a new mock instance
func NewMockQuestionDao(ctrl *gomock.Controller) *MockQuestionDao {
	mock := &MockQuestionDao{ctrl: ctrl}
	mock.recorder = &MockQuestionDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQuestionDao) EXPECT() *MockQuestionDaoMockRecorder {
	return m.recorder
}

// CreateQuestion mocks base method
func (m *MockQuestionDao) CreateQuestion(arg0 *model.Question) (*model.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuestion", arg0)
	ret0, _ := ret[0].(*model.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuestion indicates an expected call of CreateQuestion
func (mr *MockQuestionDaoMockRecorder) CreateQuestion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestion", reflect.TypeOf((*MockQuestionDao)(nil).CreateQuestion), arg0)
}

// DeleteQuestion mocks base method
func (m *MockQuestionDao) DeleteQuestion(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestion", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuestion indicates an expected call of DeleteQuestion
func (mr *MockQuestionDaoMockRecorder) DeleteQuestion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestion", reflect.TypeOf((*MockQuestionDao)(nil).DeleteQuestion), arg0)
}

// GetQuestionById mocks base method
func (m *MockQuestionDao) GetQuestionById(arg0 int) (*model.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionById", arg0)
	ret0, _ := ret[0].(*model.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionById indicates an expected call of GetQuestionById
func (mr *MockQuestionDaoMockRecorder) GetQuestionById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionById", reflect.TypeOf((*MockQuestionDao)(nil).GetQuestionById), arg0)
}

// GetQuestions mocks base method
func (m *MockQuestionDao) GetQuestions() ([]model.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestions")
	ret0, _ := ret[0].([]model.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestions indicates an expected call of GetQuestions
func (mr *MockQuestionDaoMockRecorder) GetQuestions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockQuestionDao)(nil).GetQuestions))
}

// GetQuestionsByUserId mocks base method
func (m *MockQuestionDao) GetQuestionsByUserId(arg0 int) ([]model.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionsByUserId", arg0)
	ret0, _ := ret[0].([]model.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionsByUserId indicates an expected call of GetQuestionsByUserId
func (mr *MockQuestionDaoMockRecorder) GetQuestionsByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionsByUserId", reflect.TypeOf((*MockQuestionDao)(nil).GetQuestionsByUserId), arg0)
}

// UpdateQuestion mocks base method
func (m *MockQuestionDao) UpdateQuestion(arg0 *model.Question) (*model.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestion", arg0)
	ret0, _ := ret[0].(*model.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuestion indicates an expected call of UpdateQuestion
func (mr *MockQuestionDaoMockRecorder) UpdateQuestion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockQuestionDao)(nil).UpdateQuestion), arg0)
}
