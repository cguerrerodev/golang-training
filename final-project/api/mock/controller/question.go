// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cguerrero-bdev/golang-training/final-project/api/components/controller (interfaces: QuestionController)

// Package controller is a generated GoMock package.
package controller

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuestionController is a mock of QuestionController interface.
type MockQuestionController struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionControllerMockRecorder
}

// MockQuestionControllerMockRecorder is the mock recorder for MockQuestionController.
type MockQuestionControllerMockRecorder struct {
	mock *MockQuestionController
}

// NewMockQuestionController creates a new mock instance.
func NewMockQuestionController(ctrl *gomock.Controller) *MockQuestionController {
	mock := &MockQuestionController{ctrl: ctrl}
	mock.recorder = &MockQuestionControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionController) EXPECT() *MockQuestionControllerMockRecorder {
	return m.recorder
}

// CreateQuestion mocks base method.
func (m *MockQuestionController) CreateQuestion(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateQuestion", arg0, arg1)
}

// CreateQuestion indicates an expected call of CreateQuestion.
func (mr *MockQuestionControllerMockRecorder) CreateQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestion", reflect.TypeOf((*MockQuestionController)(nil).CreateQuestion), arg0, arg1)
}

// DeleteQuestion mocks base method.
func (m *MockQuestionController) DeleteQuestion(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteQuestion", arg0, arg1)
}

// DeleteQuestion indicates an expected call of DeleteQuestion.
func (mr *MockQuestionControllerMockRecorder) DeleteQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestion", reflect.TypeOf((*MockQuestionController)(nil).DeleteQuestion), arg0, arg1)
}

// GetQuestionById mocks base method.
func (m *MockQuestionController) GetQuestionById(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetQuestionById", arg0, arg1)
}

// GetQuestionById indicates an expected call of GetQuestionById.
func (mr *MockQuestionControllerMockRecorder) GetQuestionById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionById", reflect.TypeOf((*MockQuestionController)(nil).GetQuestionById), arg0, arg1)
}

// GetQuestions mocks base method.
func (m *MockQuestionController) GetQuestions(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetQuestions", arg0, arg1)
}

// GetQuestions indicates an expected call of GetQuestions.
func (mr *MockQuestionControllerMockRecorder) GetQuestions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestions", reflect.TypeOf((*MockQuestionController)(nil).GetQuestions), arg0, arg1)
}

// GetQuestionsByUserId mocks base method.
func (m *MockQuestionController) GetQuestionsByUserId(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetQuestionsByUserId", arg0, arg1)
}

// GetQuestionsByUserId indicates an expected call of GetQuestionsByUserId.
func (mr *MockQuestionControllerMockRecorder) GetQuestionsByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionsByUserId", reflect.TypeOf((*MockQuestionController)(nil).GetQuestionsByUserId), arg0, arg1)
}

// UpdateQuestion mocks base method.
func (m *MockQuestionController) UpdateQuestion(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateQuestion", arg0, arg1)
}

// UpdateQuestion indicates an expected call of UpdateQuestion.
func (mr *MockQuestionControllerMockRecorder) UpdateQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockQuestionController)(nil).UpdateQuestion), arg0, arg1)
}
